Интеграция в Bitcoin Core/стадиальное дерево
=====================================

https://bitcoincore.org

Бинарную версию программного обеспечения Bitcoin Core, пригодную для немедленного использования, см.
https://bitcoincore.org/en/download/.

Что такое Bitcoin Core?
---------------------

Bitcoin Core подключается к пиринговой сети Bitcoin для загрузки и полной
проверки блоков и транзакций. Он также включает в себя кошелек и графический пользовательский
интерфейс, который может быть создан по желанию.

Дополнительная информация о Bitcoin Core доступна в папке [doc](/doc).

Лицензия
-------

Bitcoin Core выпускается на условиях лицензии MIT. Дополнительную информацию см. в разделе [COPYING](COPYING).
информацию или см. https://opensource.org/licenses/MIT.

Процесс разработки
-------------------

Ветка `master` регулярно собирается (инструкции см. в `doc/build-*.md`) и тестируется, но не гарантируется, что она будет
полной стабильности. [Метки](https://github.com/bitcoin/bitcoin/tags) создаются
регулярно из релизных веток для обозначения новых официальных, стабильных релизных версий Bitcoin Core.

Репозиторий https://github.com/bitcoin-core/gui используется исключительно для
разработки графического интерфейса. Его мастер-ветка идентична во всех monotree
репозиториях. Релизных веток и тегов не существует, поэтому не форкайте
этот репозиторий, если это не связано с разработкой.

Рабочий процесс внесения вклада описан в [CONTRIBUTING.md](CONTRIBUTING.md)
а полезные советы для разработчиков можно найти в [doc/developer-notes.md](doc/developer-notes.md).

Тестирование
-------

Тестирование и проверка кода - самое узкое место в разработке; мы получаем больше запросов на вынос, чем можем просмотреть и протестировать
запросов, чем мы можем рассмотреть и протестировать в короткие сроки. Пожалуйста, будьте терпеливы и помогайте нам, тестируя
чужие запросы, и помните, что это проект, критически важный с точки зрения безопасности, где любая ошибка может стоить людям
больших денег.

### Автоматизированное тестирование

Разработчикам настоятельно рекомендуется писать [unit tests](src/test/README.md) для нового кода и
присылать новые юнит-тесты для старого кода. Юнит-тесты могут быть скомпилированы и запущены
(при условии, что они не были отключены в configure) с помощью: `make check`. Более подробную информацию о запуске
и расширении модульных тестов можно найти в [/src/test/README.md](/src/test/README.md).

Существуют также [регрессионные и интеграционные тесты](/test), написанные
на языке Python.
Эти тесты можно запустить (если установлены [тестовые зависимости](/test)) с помощью: `test/functional/test_runner.py`.

Системы CI (Continuous Integration) следят за тем, чтобы каждый pull request был собран для Windows, Linux и macOS,
и что юнит/санити-тесты запускаются автоматически.

### Ручное тестирование обеспечения качества (QA)

Изменения должны быть протестированы кем-то, кроме разработчика, написавшего
код. Это особенно важно для больших изменений или изменений с высоким уровнем риска. Полезно
добавить план тестирования к описанию запроса, если тестирование изменений
не является простым.

Переводы
------------

Изменения в переводах, а также новые переводы могут быть отправлены на
[страница Bitcoin Core в Transifex](https://www.transifex.com/bitcoin/bitcoin/).

Переводы периодически извлекаются из Transifex и сливаются в git-репозиторий. См.
[процесс перевода](doc/translation_process.md) для получения подробной информации о том, как это работает.

**Важно**: Мы не принимаем изменения перевода в виде запросов на GitHub, поскольку следующий
следующий запрос от Transifex автоматически перезапишет их снова.
